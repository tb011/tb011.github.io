[
  {
    "objectID": "health_data_analysis.html",
    "href": "health_data_analysis.html",
    "title": "Health Data Analysis",
    "section": "",
    "text": "Aim\nGiven series of data tables could I extract valuable information on patients an SQL database?\nLet’s give it a go!\nData \nData Tables \n\nAppendix A\nGender: 1 = Male, 2 = Female, 9 = Unknown\nEthnicity: 01 = White, 02 = Non-white, 03 = Unknown\nAppendix B\nPrimary diagnosis – ICD-10 code:\nProstate = C61, Breast = C50, Lung = C34, Colorectal = C18, C19, C20\nHow many patients were diagnosed with prostate cancer between 2015 and 2017?\nSELECT COUNT (Patient_table.patient_id) as number_of_patients \nFROM Patient_table \nJOIN Tumor_table \n ON Patient_table.patient_id = Tumor_table.patient_id \nJOIN Regimen_table \n ON Patient_table.patient_id = Regimen_table.patient_id \n WHERE primary_diagnosis = 'C61' and regimen_start_date \\&gt;= '01/01/2015' and regimen_start_date \\&lt;= '31/01/2017';\nCount the number of patients were diagnosed with prostate cancer who started a docetaxel regimen between 2015 and 2017?\nSELECT COUNT (Patient_table.patient_id) as number_of_patients\nFROM Patient_table\nJOIN Tumor_table\n  ON Patient_table.patient_id = Tumor_table.patient_id\nJOIN Regimen_table\n  ON Patient_table.patient_id = Regimen_table.patient_id\nWHERE primary_diagnosis = 'C61' \nand regimen_start_date &gt;= '01/01/2015' and  regimen_start_date &lt;= '31/01/2017' \nand regimen = 'docetaxel';\nStratified by ethnicity and age, count the number of patients diagnosed with breast cancer who started an eribulin regimen between 2015 and 2020. Only count women who were aged ≥50 years at the start of the regimen.\nSELECT COUNT(patient_id) AS number_of_patients, Ethnicity, Age\n  FROM (SELECT Patient_table.patient_id \n          , (CASE WHEN dateadd(year, datediff (year, Date_of_birth, Regimen_table.regimen_start_date), Date_of_birth) &gt; Regimen_table.regimen_start_date \n         THEN datediff(year, Date_of_birth, Regimen_table.regimen_start_date) - 1 \n                         ELSE datediff(year, Date_of_birth, Regimen_table.regimen_start_date)\n               END) AS Age_at_regimen\n          , (CASE WHEN dateadd(year, datediff (year, Date_of_birth, getdate()), Date_of_birth) &gt; getdate()\n                        THEN datediff(year, Date_of_birth, getdate()) - 1 \n                        ELSE datediff(year, Date_of_birth, getdate())\n               END) AS Age\n          , Regimen, primary_diagnosis, regimen_start_date, gender, Date_of_birth, Ethnicity \n          FROM Patient_table  \nJOIN Tumor_table\n  ON Patient_table.patient_id = Tumor_table.patient_id\nJOIN Regimen_table\n  ON Patient_table.patient_id = Regimen_table.patient_id\nWHERE primary_diagnosis = 'C50' -- breast cancer ICD-10 code\nand regimen_start_date &gt;= '01/01/2015' and  regimen_start_date &lt;= '31/12/2020' -- between 2015 and 2020\nand regimen = 'eribulin' \nand gender = 2 -- only women\n      ) AS results\n     WHERE results.Age_at_regimen &gt;= 50\nGROUP BY Ethnicity, Age;"
  },
  {
    "objectID": "cross-validation.html",
    "href": "cross-validation.html",
    "title": "Cross-validation",
    "section": "",
    "text": "The question:\nWhen we do a 25% / 75% split. How do we know that the i.e. last quarter of the dataset (or a random selection of the dataset) is the best selection of the data to test on? It may randomly not be a good selection.\nBring in k-fold cross-validation."
  },
  {
    "objectID": "cross-validation.html#k-fold-cross-validation",
    "href": "cross-validation.html#k-fold-cross-validation",
    "title": "Cross-validation",
    "section": "K-fold cross validation",
    "text": "K-fold cross validation\nExample: 4-fold cross validation (k = 4)\n1. split the data in k-(4) folds.\n2. Train on 3 partitions of the data, test on the remaining block. Take the below permutations\nTrain {2, 3, 4} ; Test {1}\n| 1 | - test\n| 2 | - train\n| 3 | - train\n| 4 | - train\nTrain {1, 3, 4} ; Test {2}\n| 1 | - train\n| 2 | - test\n| 3 | - train\n| 4 | - train\nTrain {1, 2, 4} ; Test {3}\n| 1 | - train\n| 2 | - train\n| 3 | - test\n| 4 | - train\nTrain {1, 2, 3} ; Test {4}\n| 1 | - train\n| 2 | - train\n| 3 | - train\n| 4 | - test\nWe keep track of how well the machine learning algorithm does on teach test and then then take the average of the the test data scores.\nWe can then use this metric to compare its performance amongst other algorithms.\nK = 10, is a popular default. Meaning we train on 9 folds of the data, and test on the remaining unseen fold. In using k-fold cross-validation it means that every block of data is used for testing, rather than just 25%, for instance."
  },
  {
    "objectID": "cross-validation.html#leave-one-out-cross-validation",
    "href": "cross-validation.html#leave-one-out-cross-validation",
    "title": "Cross-validation",
    "section": "Leave one out cross-validation",
    "text": "Leave one out cross-validation\nWe could even take this example to the extreme and call each row (record/sample/ individual) as a “fold” and leave one individual out, and see how well the model is at classifying the remaining individual."
  },
  {
    "objectID": "cross-validation.html#stratified-k-fold-cross-validation",
    "href": "cross-validation.html#stratified-k-fold-cross-validation",
    "title": "Cross-validation",
    "section": "Stratified k-fold cross-validation",
    "text": "Stratified k-fold cross-validation\nThis is where the dilemma of unbalanced datasets come to bite. Let me give an example. In our typical health data set up, within a population the likelihood of observing a with a disease (i.e. COPD) is lower than that of observing an individual without COPD. The problem is exacerbated further with rare diseases. Therefore k-fold can fail to work, because we would like each fold to contain individuals with the disease. However, just by random chance, or if a disease is not very prevalent in a population our our sample of the population, then we may risk the event of not having cases (individuals with the disease) in one or many folds of our training data, which as we can envisage would have a poor performance when our model comes across a case in the first time in the test data. Eek!\nTherefore, we can use stratified k-fold cross validation to keep the same percentage of samples for each class, in each fold. For example, if our dataset has 10% of patients having COPD and 90% of patients not having COPD. Then by using StratifiedKFold the sci-kit learn library to keep the proportion of cases/non-cases (10% / 90%) the same in each of our k folds."
  },
  {
    "objectID": "cross-validation.html#repeated-stratified-k-fold-cross-validation",
    "href": "cross-validation.html#repeated-stratified-k-fold-cross-validation",
    "title": "Cross-validation",
    "section": "Repeated stratified k-fold cross-validation",
    "text": "Repeated stratified k-fold cross-validation\nIf we would really like to go one step further, we can repeat the random sampling of individuals in with a different randomisation in each repetition using RepeatedStratifiedKFold. This would mean that we would give our parameter k, for the number of folds and the parameter, n for the number of repeats. The result would be the average result across all folds from all runs. Please note that you are working on an balanced dataset, you can also use repeated k-fold cross-validation without the stratification!"
  },
  {
    "objectID": "cross-validation.html#final-comments",
    "href": "cross-validation.html#final-comments",
    "title": "Cross-validation",
    "section": "Final comments",
    "text": "Final comments\nIt can be much slower to partition the data in to k-folds (or repeated/stratified/repeated stratified k-folds) rather than splitting the data into a training and test set. Some times, depending on the application, computation time (in training and/or running the model) can be more important scoring a few decimal places higher on accuracy. So that is a trade off that something else for us to consider!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "List of projects:\nExample R code\nloadData &lt;- function(dataset_csv, list){\n  dataset &lt;- read.csv(dataset_csv)\n  results &lt;- lapply(dataset, list) \n  return(results)\n}\n\nresults &lt;- loadData(dataset_csv, list)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tb011.github.io",
    "section": "",
    "text": "Welcome to my online website."
  }
]